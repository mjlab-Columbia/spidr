'''
Aim: A Snakemake workflow to process SPIDR BAMs
'''

##############################################################################
#Initialize settings
##############################################################################

try:
    config_path = config["config_path"]
except:
    config_path = 'config.postprocess-targets.yaml'

configfile: config_path

try:
    bid_config = config['bID']
    print('Using BarcodeID config:', bid_config)
except:
    bid_config = 'config.txt'
    print('Config "bID" not specified, looking for config at:', bid_config)

try:
    SAMPLE_STR = config['samples']
    print('Using libraries:', SAMPLE_STR)
except:
    print('No sample names provided. No default')
    sys.exit()

try:
    out_dir = config['output_dir']
    print('All data will be written to:', out_dir)
except:
    out_dir = ''
    print('Defaulting to working directory as output directory')

try:
    bam_dir = config['bam_dir']
    print('Looking for bam files in:', bam_dir)
except:
    bam_dir = out_dir + 'workup/splitbams'
    print('Defaulting to splitbams directory')

try:
    resolution = config['bin_size']
    print('Making bigwigs of bin size: ', resolution)
except:
    resolution = 1000
    print('Defaulting to bin size of 1000')

try:
    temp_dir = config['temp_dir']
    print("Using temporary directory:", temp_dir)
except:
    temp_dir = '/central/scratch/'
    print('Defaulting to central scratch as temporary directory')


################################################################################
#Get sample files
###############################################################################

#Prep samples from fastq directory using fastq2json_updated.py, now load json file
exclude = ['ambiguous', 'uncertain', '', 'merged']
TARGETS = []

# Iterate through bam_dir and find all targets generated by generate-targets.smk pipeline
# Format of files is: <sample name>.<control or experimental>.RPM_<target>.bam
for filename in os.listdir(bam_dir):
    if filename.endswith('.bam'):
        filename = filename.strip('.bam')
        identifier = filename.split('.')[-1]
        target_string = identifier.split('_')

        # Helps exclude the case of no target (i.e. ...RPM.bam)
        if len(target_string) == 2:
            target = target_string[-1]
            if target not in exclude:
                TARGETS.append(target)

SAMPLE_LIST = SAMPLE_STR.split(' ')


# FIXME: Add 'experimental' back to control_or_exp command after generating all targets from generate-targets.smk
BAMS = expand(
    bam_dir + "{sample}.{control_or_exp}.RPM_{target}.bam", 
    sample=SAMPLE_LIST, 
    control_or_exp=['control'],
    target=TARGETS
)
MERGED = expand(
    bam_dir + "{target}.merged.bam", 
    target=TARGETS
)
BIGWIGS = expand(
    out_dir + "/bigwigs/{target}.{bs}.bigwig", 
    target=TARGETS, 
    bs=resolution
) 

# FIXME: Add 'experimental' back to control_or_exp command after generating all targets from generate-targets.smk
BED_FILES = expand(
    [
        out_dir + "workup/downsample/{sample}.{target}.{control_or_exp}.actual.bedgraph",
        out_dir + "workup/downsample/{sample}.{target}.{control_or_exp}.diff.bedgraph",
        out_dir + "workup/downsample/{sample}.{target}.{control_or_exp}.pval.bed",
    ],
    sample=SAMPLE_LIST,
    control_or_exp=['control'],
    target=TARGETS
)

################################################################################
################################################################################
#RULE ALL
################################################################################
################################################################################

rule all:
    input: BAMS + MERGED + BIGWIGS

# FIXME: Add 'experimental' back to control_or_exp command after generating all targets from generate-targets.smk
rule merge_bams:
    input:
        expand(
            bam_dir + "{sample}.{control_or_exp}.RPM_{{target}}.bam", 
            sample=SAMPLE_LIST, 
            control_or_exp=['control'],
        )
    output:
        bam_dir + "{target}.merged.bam"
    conda:
        "envs_post/deeptools.yaml"
    threads:
        8
    shell:
        '''
        samtools merge -@ {threads} {output} {input}
        samtools index {output}
        '''

rule make_bigwigs:
    input:
        bam_dir + "{target}.merged.bam" 
    output:
        out_dir + "/bigwigs/{target}.{bs}.bigwig"
    conda:
        "envs_post/deeptools.yaml"
    log:
        out_dir + "/logs/{target}.{bs}.make_bigwigs.log"
    threads:
        8
    shell:
        '''
        bamCoverage -p max/2 -b {input} -o {output} -bs {resolution} -of bigwig >& {log}
        '''

#rule random_downsample_clip_control:
#    input:
#        "workup/splitbams/{sample}.control.RPM_{target}.bam"
#    output: 
#        control_actual = "workup/downsample/{sample}.{target}.control.actual.bedgraph",
#        control_diff = "workup/downsample/{sample}.{target}.control.diff.bedgraph",
#        control_pval = "workup/downsample/{sample}.{target}.control.pval.bed"
#    params:
#        control_bams = lambda wildcards: " ".join(
#            expand(
#                "workup/splitbams/{sample}.{control_or_exp}.RPM_{{target}}.bam",
#                sample=wildcards.sample,
#                control_or_exp=['control', 'experimental'],
#                target=[t for t in TARGETS if t != wildcards.target])
#            ),
#        prefix = "workup/downsample/{sample}.{target}"
#    conda:
#        "envs/java.yaml"
#    log: 
#        "workup/logs/{sample}_{target}_control.randomdownsampleclip.log"
#    shell:
#        """  
#        (java \
#            -jar \
#            --enable-preview \
#            {input} \
#            {params.control_bams} \
#            {params.prefix}) &> {log}
#        """ 
#
#rule random_downsample_clip_experimental:
#    input:
#        "workup/splitbams/{sample}.experimental.RPM_{target}.bam"
#    output: 
#        experimental_actual = "workup/downsample/{sample}.{target}.experimental.actual.bedgraph",
#        experimental_diff = "workup/downsample/{sample}.{target}.experimental.diff.bedgraph",
#        experimental_pval = "workup/downsample/{sample}.{target}.experimental.pval.bed"
#    params:
#        control_bams = lambda wildcards: " ".join(
#            expand(
#                "workup/splitbams/{sample}.{control_or_exp}.RPM_{{target}}.bam",
#                sample=wildcards.sample,
#                control_or_exp=['control', 'experimental'],
#                target=[t for t in TARGETS if t != wildcards.target])
#            ),
#        prefix = "workup/downsample/{sample}.{target}"
#    conda:
#        "envs/java.yaml"
#    log:
#        "workup/logs/{sample}_{target}_control.randomdownsampleclip.log"
#    shell:
#        """
#        (java \
#            -jar \
#            --enable-preview \
#            {input} \
#            {params.control_bams} \
#            {params.prefix}) &> {log}
#        """
